// generated by @greymass/abi2core

import {
  Asset,
  Bytes,
  Float32,
  Float64,
  Int16,
  Int32,
  Int64,
  Int8,
  Name,
  PublicKey,
  Signature,
  Struct,
  TimePoint,
  UInt16,
  UInt32,
  UInt64,
  UInt8,
  Variant
} from "@greymass/eosio"

@Struct.type("AccountAuth")
export class AccountAuth extends Struct {
    @Struct.field(PublicKey, { array: true }) keys!:PublicKey[]
    @Struct.field(UInt32) nonce!:UInt32
}

@Struct.type("TokenUnstake")
export class TokenUnstake extends Struct {
    @Struct.field(UInt16) redeemable_after_round!:UInt16
    @Struct.field(UInt32) quantity!:UInt32
}

@Struct.type("AccountStake")
export class AccountStake extends Struct {
    @Struct.field(TokenUnstake, { array: true }) unstaking!:TokenUnstake[]
    @Struct.field(UInt32) self_staked!:UInt32
    @Struct.field(UInt16) received_delegated_stake!:UInt16
}

@Struct.type("AccountPowerMod")
export class AccountPowerMod extends Struct {
    @Struct.field(UInt8) pwr_multiplier!:UInt8
    @Struct.field(UInt16) pwr_add_per_round!:UInt16
    @Struct.field(UInt16) expires_round!:UInt16
    @Struct.field(UInt32) aggregate_pwr_remaining!:UInt32
}

@Struct.type("AccountPower")
export class AccountPower extends Struct {
    @Struct.field(UInt16) last_claimed_round!:UInt16
    @Struct.field(UInt16) rating!:UInt16
    @Struct.field(AccountPowerMod, { array: true }) mods!:AccountPowerMod[]
}

@Struct.type("AccountTeam")
export class AccountTeam extends Struct {
    @Struct.field(UInt16) team_id!:UInt16
    @Struct.field(UInt16) last_edit_round!:UInt16
    @Struct.field(UInt8) team_tax_mult!:UInt8
    @Struct.field(UInt32) team_cumulative_contribution!:UInt32
}

@Struct.type("Account")
export class Account extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name, { array: true }) owners!:Name[]
    @Struct.field(AccountAuth) auth!:AccountAuth
    @Struct.field(Name, { array: true }) sponsors!:Name[]
    @Struct.field(AccountStake) stake!:AccountStake
    @Struct.field(AccountPower) power!:AccountPower
    @Struct.field(AccountTeam) team!:AccountTeam
    @Struct.field("string") social_ipfs_json!:string
    @Struct.field(UInt32) balance!:UInt32
    @Struct.field(UInt16) nft_balance!:UInt16
}

@Struct.type("PermissionLevel")
export class PermissionLevel extends Struct {
    @Struct.field(Name) actor!:Name
    @Struct.field(Name) permission!:Name
}

@Struct.type("Action")
export class Action extends Struct {
    @Struct.field(Name) account!:Name
    @Struct.field(Name) name!:Name
    @Struct.field(PermissionLevel, { array: true }) authorization!:PermissionLevel[]
    @Struct.field(Bytes) data!:Bytes
}

@Variant.type("AtomicValue", [Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, Float32, Float64, { type: Int8, array: true }, { type: Int16, array: true }, { type: Int32, array: true }, { type: Int64, array: true }, Bytes, { type: UInt16, array: true }, { type: UInt32, array: true }, { type: UInt64, array: true }, { type: Float32, array: true }, { type: Float64, array: true }])
class AtomicValue extends Variant {}

@Struct.type("AtomicAttribute")
export class AtomicAttribute extends Struct {
    @Struct.field("string") key!:string
    @Struct.field(AtomicValue) value!:AtomicValue
}

@Struct.type("AtomicFormat")
export class AtomicFormat extends Struct {
    @Struct.field("string") name!:string
    @Struct.field("string") type!:string
}

@Struct.type("Auth")
export class Auth extends Struct {
    @Struct.field(Name) boid_id_auth!:Name
    @Struct.field(UInt8) actions_num!:UInt8
}

@Struct.type("ConfigAccount")
export class ConfigAccount extends Struct {
    @Struct.field(UInt32) purchase_price!:UInt32
    @Struct.field(UInt8) max_owners!:UInt8
    @Struct.field(UInt8) max_sponsors!:UInt8
    @Struct.field(UInt8) max_pwrmods!:UInt8
    @Struct.field("string[]") suffix_whitelist!:string[]
    @Struct.field(UInt32) remove_sponsor_price!:UInt32
}

@Struct.type("ConfigPower")
export class ConfigPower extends Struct {
    @Struct.field(UInt16) round_decay_constant!:UInt16
    @Struct.field(Float32) round_decay_mult!:Float32
    @Struct.field(Float32) sponsor_tax_mult!:Float32
    @Struct.field(Float32) powered_stake_mult!:Float32
    @Struct.field(Float32) powered_stake_pwr!:Float32
    @Struct.field(UInt16) claim_maximum_elapsed_rounds!:UInt16
}

@Struct.type("ConfigMint")
export class ConfigMint extends Struct {
    @Struct.field(Float32) round_powered_stake_mult!:Float32
    @Struct.field(Float32) round_power_mult!:Float32
}

@Struct.type("ConfigTeam")
export class ConfigTeam extends Struct {
    @Struct.field(UInt16) change_min_rounds!:UInt16
    @Struct.field(UInt16) edit_team_min_rounds!:UInt16
    @Struct.field(UInt16) team_edit_max_pct_change!:UInt16
    @Struct.field(UInt32) buy_team_cost!:UInt32
    @Struct.field(UInt32) owner_stake_required!:UInt32
    @Struct.field(UInt16) owner_future_stake_lock_rounds_required!:UInt16
}

@Struct.type("ConfigStake")
export class ConfigStake extends Struct {
    @Struct.field(UInt8) unstake_rounds!:UInt8
    @Struct.field(UInt8) extra_stake_min_locked_rounds!:UInt8
}

@Struct.type("ConfigTime")
export class ConfigTime extends Struct {
    @Struct.field(TimePoint) rounds_start!:TimePoint
    @Struct.field(UInt32) round_length_sec!:UInt32
}

@Struct.type("ConfigAuth")
export class ConfigAuth extends Struct {
    @Struct.field(Name, { array: true }) key_actions_whitelist!:Name[]
    @Struct.field(UInt32) key_account_max_stake!:UInt32
    @Struct.field(UInt32) key_account_max_balance!:UInt32
    @Struct.field(UInt8) account_max_keys!:UInt8
    @Struct.field(UInt32) worker_max_bill_per_action!:UInt32
}

@Struct.type("ConfigNft")
export class ConfigNft extends Struct {
    @Struct.field(UInt16) boid_id_maximum_nfts!:UInt16
}

@Struct.type("ConfigAutoAdjust")
export class ConfigAutoAdjust extends Struct {
    @Struct.field(UInt32) target_inflation_per_round!:UInt32
    @Struct.field(Float32) power_mult_max_adjust!:Float32
    @Struct.field(Float32) powered_stake_mult_max_adjust!:Float32
    @Struct.field(UInt16) adjustment_interval_rounds!:UInt16
}

@Struct.type("Config")
export class Config extends Struct {
    @Struct.field(ConfigAccount) account!:ConfigAccount
    @Struct.field(ConfigPower) power!:ConfigPower
    @Struct.field(ConfigMint) mint!:ConfigMint
    @Struct.field(ConfigTeam) team!:ConfigTeam
    @Struct.field(ConfigStake) stake!:ConfigStake
    @Struct.field(ConfigTime) time!:ConfigTime
    @Struct.field(ConfigAuth) auth!:ConfigAuth
    @Struct.field(ConfigNft) nft!:ConfigNft
    @Struct.field(ConfigAutoAdjust) auto!:ConfigAutoAdjust
    @Struct.field("bool") paused!:boolean
    @Struct.field("bool") allow_deposits!:boolean
    @Struct.field("bool") allow_withdrawals!:boolean
}

@Struct.type("Deposits")
export class Deposits extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) boid_quantity!:UInt32
}

@Struct.type("ExtendedSymbol")
export class ExtendedSymbol extends Struct {
    @Struct.field(Asset.Symbol) sym!:Asset.Symbol
    @Struct.field(Name) contract!:Name
}

@Struct.type("Global")
export class Global extends Struct {
    @Struct.field(UInt64) total_accounts!:UInt64
    @Struct.field(UInt64) total_power!:UInt64
    @Struct.field(UInt64) total_liquid_balance!:UInt64
    @Struct.field(UInt64) total_stake!:UInt64
    @Struct.field(UInt16) last_rebalance_round!:UInt16
    @Struct.field(UInt16) last_inflation_adjust_round!:UInt16
}

@Struct.type("MintLog")
export class MintLog extends Struct {
    @Struct.field(UInt32) account!:UInt32
    @Struct.field(UInt32) team!:UInt32
    @Struct.field(UInt32) team_owner!:UInt32
    @Struct.field(UInt32) overstake!:UInt32
    @Struct.field(UInt32) total!:UInt32
}

@Struct.type("NFT")
export class NFT extends Struct {
    @Struct.field(UInt64) asset_id!:UInt64
    @Struct.field(UInt16) locked_until_round!:UInt16
}

@Struct.type("NFTMint")
export class NFTMint extends Struct {
    @Struct.field(Name) mint_receiver_boid_id!:Name
    @Struct.field(UInt16) mint_quantity_remaining!:UInt16
}

@Struct.type("NftAction")
export class NftAction extends Struct {
    @Struct.field(Name) collection_name!:Name
    @Struct.field(Name) schema_name!:Name
    @Struct.field(Int32) template_id!:Int32
    @Struct.field(AtomicAttribute, { array: true }) match_immutable_attributes!:AtomicAttribute[]
    @Struct.field(AtomicAttribute, { array: true }) match_mutable_attributes!:AtomicAttribute[]
    @Struct.field("bool") burn!:boolean
    @Struct.field(UInt16) lock_rounds!:UInt16
}

@Struct.type("NftMint")
export class NftMint extends Struct {
    @Struct.field(Int32) mint_template_id!:Int32
    @Struct.field(Name) mint_schema_name!:Name
    @Struct.field(Name) mint_collection_name!:Name
    @Struct.field(AtomicAttribute, { array: true }) immutable_data!:AtomicAttribute[]
    @Struct.field(AtomicAttribute, { array: true }) mutable_data!:AtomicAttribute[]
    @Struct.field(UInt8) quantity!:UInt8
}

@Struct.type("OfferRequirements")
export class OfferRequirements extends Struct {
    @Struct.field(UInt16, { array: true }) team_id!:UInt16[]
    @Struct.field(UInt16) min_power!:UInt16
    @Struct.field(UInt32) min_balance!:UInt32
    @Struct.field(UInt32) min_stake!:UInt32
    @Struct.field(UInt32) min_cumulative_team_contribution!:UInt32
}

@Struct.type("OfferAction")
export class OfferAction extends Struct {
    @Struct.field(UInt16) delegated_stake!:UInt16
    @Struct.field(UInt16) stake_locked_additional_rounds!:UInt16
    @Struct.field(NftAction, { array: true }) nft_actions!:NftAction[]
    @Struct.field(UInt32) balance_payment!:UInt32
}

@Struct.type("OfferRewards")
export class OfferRewards extends Struct {
    @Struct.field(NftMint, { array: true }) nft_mints!:NftMint[]
    @Struct.field(UInt32) balance_deposit!:UInt32
    @Struct.field(UInt16) delegated_stake!:UInt16
    @Struct.field(UInt16) stake_locked_additional_rounds!:UInt16
    @Struct.field(Bytes) activate_powermod_ids!:Bytes
}

@Struct.type("OfferLimits")
export class OfferLimits extends Struct {
    @Struct.field(UInt32) offer_quantity_remaining!:UInt32
    @Struct.field(UInt16) available_until_round!:UInt16
}

@Struct.type("Offer")
export class Offer extends Struct {
    @Struct.field(UInt64) offer_id!:UInt64
    @Struct.field(OfferRequirements) requirements!:OfferRequirements
    @Struct.field(OfferAction) actions!:OfferAction
    @Struct.field(OfferRewards) rewards!:OfferRewards
    @Struct.field(OfferLimits) limits!:OfferLimits
    @Struct.field(UInt32) total_claimed!:UInt32
}

@Struct.type("PowerClaimLog")
export class PowerClaimLog extends Struct {
    @Struct.field(UInt16) before!:UInt16
    @Struct.field(UInt16) after!:UInt16
    @Struct.field(UInt16) from_mods!:UInt16
    @Struct.field(UInt16) decayed!:UInt16
    @Struct.field(UInt16) rounds!:UInt16
}

@Struct.type("PwrMod")
export class PwrMod extends Struct {
    @Struct.field(UInt8) mod_id!:UInt8
    @Struct.field(UInt8) pwr_multiplier!:UInt8
    @Struct.field(UInt16) pwr_add_per_round!:UInt16
    @Struct.field(UInt16) expire_after_elapsed_rounds!:UInt16
    @Struct.field(UInt32) aggregate_pwr_capacity!:UInt32
}

@Struct.type("Stake")
export class Stake extends Struct {
    @Struct.field(UInt64) stake_id!:UInt64
    @Struct.field(Name) from_boid_id!:Name
    @Struct.field(Name) to_boid_id!:Name
    @Struct.field(UInt16) stake_quantity!:UInt16
    @Struct.field(UInt16) locked_until_round!:UInt16
}

@Struct.type("Stats")
export class Stats extends Struct {
    @Struct.field(UInt16) round!:UInt16
    @Struct.field(UInt32) power_added!:UInt32
    @Struct.field(UInt32) boid_generated!:UInt32
    @Struct.field(UInt32) accounts_created!:UInt32
}

@Struct.type("Team")
export class Team extends Struct {
    @Struct.field(UInt16) team_id!:UInt16
    @Struct.field(UInt32) balance!:UInt32
    @Struct.field(AccountStake) stake!:AccountStake
    @Struct.field(Name) owner!:Name
    @Struct.field(Name, { array: true }) managers!:Name[]
    @Struct.field(UInt8) min_pwr_tax_mult!:UInt8
    @Struct.field(UInt8) owner_cut_mult!:UInt8
    @Struct.field("string") url_safe_name!:string
    @Struct.field("string") info_json_ipfs!:string
    @Struct.field(UInt32) power!:UInt32
    @Struct.field(UInt32) members!:UInt32
    @Struct.field(UInt16) last_edit_round!:UInt16
}

@Struct.type("account.add")
export class AccountAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name, { array: true }) owners!:Name[]
    @Struct.field(Name, { array: true }) sponsors!:Name[]
    @Struct.field(PublicKey, { array: true }) keys!:PublicKey[]
}

@Struct.type("account.buy")
export class AccountBuy extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name, { array: true }) owners!:Name[]
    @Struct.field(PublicKey, { array: true }) keys!:PublicKey[]
    @Struct.field(Name) sponsor!:Name
}

@Struct.type("account.edit")
export class AccountEdit extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field("string") social_ipfs_json!:string
}

@Struct.type("account.free")
export class AccountFree extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("auth")
export class AuthAction extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Action, { array: true }) actions!:Action[]
    @Struct.field(Signature) sig!:Signature
    @Struct.field(Int32) keyIndex!:Int32
}

@Struct.type("authaddkey")
export class AuthAddkey extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(PublicKey) key!:PublicKey
}

@Struct.type("authinit")
export class AuthInit extends Struct {
}

@Struct.type("authrmkey")
export class AuthRmkey extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Int32) keyIndex!:Int32
}

@Struct.type("configclear")
export class ConfigClear extends Struct {
}

@Struct.type("configset")
export class ConfigSet extends Struct {
    @Struct.field(Config) config!:Config
}

@Struct.type("globalclear")
export class GlobalClear extends Struct {
}

@Struct.type("globalset")
export class GlobalSet extends Struct {
    @Struct.field(Global) globalData!:Global
}

@Struct.type("internalxfer")
export class Internalxfer extends Struct {
    @Struct.field(Name) from_boid_id!:Name
    @Struct.field(Name) to_boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
    @Struct.field("string") memo!:string
}

@Struct.type("logpwradd")
export class Logpwradd extends Struct {
    @Struct.field(UInt16) received!:UInt16
    @Struct.field(UInt16) from_mult_mods!:UInt16
    @Struct.field(UInt16) diverted_to_sponsor!:UInt16
    @Struct.field(UInt16) power_increased!:UInt16
    @Struct.field(Name) orign!:Name
}

@Struct.type("logpwrclaim")
export class Logpwrclaim extends Struct {
    @Struct.field(PowerClaimLog) power!:PowerClaimLog
    @Struct.field(MintLog) mint!:MintLog
}

@Struct.type("nftlock")
export class NftLock extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt64) asset_id!:UInt64
    @Struct.field(UInt16) locked_until_round!:UInt16
}

@Struct.type("nftreceiver")
export class NftReceiver extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt16) mint_quantity!:UInt16
}

@Struct.type("nftwithdraw")
export class NftWithdraw extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt64, { array: true }) asset_ids!:UInt64[]
    @Struct.field(Name) to!:Name
}

@Struct.type("nftxfer")
export class NftXfer extends Struct {
    @Struct.field(Name) from_boid_id!:Name
    @Struct.field(Name) to_boid_id!:Name
    @Struct.field(UInt64, { array: true }) asset_ids!:UInt64[]
}

@Struct.type("offeradd")
export class OfferAdd extends Struct {
    @Struct.field(OfferRequirements) requirements!:OfferRequirements
    @Struct.field(OfferAction) actions!:OfferAction
    @Struct.field(OfferRewards) rewards!:OfferRewards
    @Struct.field(OfferLimits) limits!:OfferLimits
}

@Struct.type("offerclaim")
export class OfferClaim extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt64) offer_id!:UInt64
    @Struct.field(UInt64, { array: true }) required_nft_action_ids!:UInt64[]
}

@Struct.type("owneradd")
export class OwnerAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name) owner!:Name
}

@Struct.type("ownerrm")
export class OwnerRm extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name) owner!:Name
}

@Struct.type("poweradd")
export class PowerAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt16) power!:UInt16
}

@Struct.type("powerclaim")
export class PowerClaim extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("pwrmodadd")
export class PwrmodAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt8) mod_id!:UInt8
}

@Struct.type("pwrmodnew")
export class PwrmodNew extends Struct {
    @Struct.field(PwrMod) mod!:PwrMod
}

@Struct.type("pwrmodrm")
export class PwrmodRm extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Int32) pwrmod_index!:Int32
}

@Struct.type("rebalance")
export class Rebalance extends Struct {
}

@Struct.type("stake")
export class StakeAction extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
}

@Struct.type("stakedeleg")
export class StakeDeleg extends Struct {
    @Struct.field(Name) from_boid_id!:Name
    @Struct.field(Name) to_boid_id!:Name
    @Struct.field(UInt16) stake_quantity!:UInt16
    @Struct.field(UInt16) lock_until_round!:UInt16
}

@Struct.type("statsclean")
export class StatsClean extends Struct {
}

@Struct.type("teamchange")
export class TeamChange extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt16) new_team_id!:UInt16
    @Struct.field(UInt8) new_pwr_tax_mult!:UInt8
}

@Struct.type("teamcreate")
export class TeamCreate extends Struct {
    @Struct.field(Name) owner!:Name
    @Struct.field(UInt8) min_pwr_tax_mult!:UInt8
    @Struct.field(UInt8) owner_cut_mult!:UInt8
    @Struct.field("string") url_safe_name!:string
    @Struct.field("string") info_json_ipfs!:string
}

@Struct.type("teamedit")
export class TeamEdit extends Struct {
    @Struct.field(UInt8) team_id!:UInt8
    @Struct.field(Name) owner!:Name
    @Struct.field(Name, { array: true }) managers!:Name[]
    @Struct.field(UInt8) min_pwr_tax_mult!:UInt8
    @Struct.field(UInt8) owner_cut_mult!:UInt8
    @Struct.field("string") url_safe_name!:string
    @Struct.field("string") info_json_ipfs!:string
}

@Struct.type("teamtaxrate")
export class TeamTaxrate extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt8) new_pwr_tax_mult!:UInt8
}

@Struct.type("thisround")
export class Thisround extends Struct {
}

@Struct.type("unstakeend")
export class UnstakeEnd extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("unstakeinit")
export class UnstakeInit extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
}

@Struct.type("unstakestop")
export class UnstakeStop extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("unstkedeleg")
export class UnstkeDeleg extends Struct {
    @Struct.field(UInt64) stake_id!:UInt64
}

@Struct.type("withdraw")
export class Withdraw extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
    @Struct.field(Name) to!:Name
}
