let JSBI = null;
export const hasNativeBigInt = typeof BigInt !== "undefined";
export function plugJSBI(jsbi) {
    JSBI = jsbi;
}
let _isBigInt;
let _make;
let _add;
let _div;
let _sub;
let _mul;
let _rshift;
let _bitand;
let _gte;
let _lt;
let _remainder;
if (hasNativeBigInt) {
    _isBigInt = (val) => typeof val === "bigint";
    _make = (val) => BigInt(val);
    _add = (op1, op2) => (op1 + op2);
    _sub = (op1, op2) => (op1 - op2);
    _div = (op1, op2) => (op1 / op2);
    _mul = (op1, op2) => (op1 * op2);
    _rshift = (op1, op2) => (op1 >> op2);
    _bitand = (op1, op2) => (op1 & op2);
    _gte = (op1, op2) => op1 >= op2;
    _lt = (op1, op2) => op1 < op2;
    _remainder = (op1, op2) => (op1 % op2);
}
else {
    _isBigInt = (val) => {
        const j = ensureJSBI();
        return val instanceof j;
    };
    _make = (val) => {
        const j = ensureJSBI();
        return j.BigInt(val);
    };
    _add = (op1, op2) => {
        const j = ensureJSBI();
        return j.add(op1, op2);
    };
    _sub = (op1, op2) => {
        const j = ensureJSBI();
        return j.subtract(op1, op2);
    };
    _div = (op1, op2) => {
        const j = ensureJSBI();
        return j.divide(op1, op2);
    };
    _mul = (op1, op2) => {
        const j = ensureJSBI();
        return j.multiply(op1, op2);
    };
    _rshift = (op1, op2) => {
        const j = ensureJSBI();
        return j.signedRightShift(op1, op2);
    };
    _bitand = (op1, op2) => {
        const j = ensureJSBI();
        return j.bitwiseAnd(op1, op2);
    };
    _gte = (op1, op2) => {
        const j = ensureJSBI();
        return j.greaterThanOrEqual(op1, op2);
    };
    _lt = (op1, op2) => {
        const j = ensureJSBI();
        return j.lessThan(op1, op2);
    };
    _remainder = (op1, op2) => {
        const j = ensureJSBI();
        return j.remainder(op1, op2);
    };
}
function ensureJSBI() {
    if (JSBI == null) {
        throw new Error("JSBI library is required to polyfill BigInt");
    }
    return JSBI;
}
export const isBigInt = _isBigInt;
export const make = _make;
export const add = _add;
export const sub = _sub;
export const div = _div;
export const mul = _mul;
export const rshift = _rshift;
export const bitand = _bitand;
export const gte = _gte;
export const lt = _lt;
export const remainder = _remainder;
