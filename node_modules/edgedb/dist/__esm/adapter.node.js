import * as crypto from "crypto";
import { promises as fs } from "fs";
import * as path from "path";
import * as os from "os";
import * as net from "net";
import * as tls from "tls";
import * as readline from "readline";
import { Writable } from "stream";
export { path, net, crypto, fs, tls };
export async function readFileUtf8(fn) {
    return await fs.readFile(fn, { encoding: "utf8" });
}
export async function readDir(pathString) {
    return fs.readdir(pathString);
}
export async function walk(dir) {
    try {
        await fs.access(dir);
    }
    catch (err) {
        return [];
    }
    const dirents = await fs.readdir(dir, { withFileTypes: true });
    const files = await Promise.all(dirents.map(dirent => {
        const res = path.resolve(dir, dirent.name);
        return dirent.isDirectory() ? walk(res) : res;
    }));
    return Array.prototype.concat(...files);
}
export async function exists(filepath) {
    try {
        await fs.access(filepath);
        return true;
    }
    catch {
        return false;
    }
}
export function input(message, params) {
    let silent = false;
    const output = !!(params === null || params === void 0 ? void 0 : params.silent)
        ? new Writable({
            write(chunk, encoding, callback) {
                if (!silent)
                    process.stdout.write(chunk, encoding);
                callback();
            },
        })
        : process.stdout;
    const rl = readline.createInterface({
        input: process.stdin,
        output,
    });
    return new Promise((resolve, rej) => {
        rl.question(message, val => {
            rl.close();
            resolve(val);
        });
        silent = true;
    });
}
export async function randomBytes(size) {
    return new Promise((resolve, reject) => {
        crypto.randomBytes(size, (err, buf) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(buf);
            }
        });
    });
}
export function H(msg) {
    const sign = crypto.createHash("sha256");
    sign.update(msg);
    return sign.digest();
}
export function HMAC(key, ...msgs) {
    const hm = crypto.createHmac("sha256", key);
    for (const msg of msgs) {
        hm.update(msg);
    }
    return hm.digest();
}
export const homeDir = os.homedir;
export function hrTime() {
    const [s, ns] = process.hrtime();
    return s * 1000 + ns / 1000000;
}
export function exit(code) {
    process.exit(code);
}
export function srcDir() {
    return __dirname;
}
