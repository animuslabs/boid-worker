// generated by @greymass/abi2core
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Asset, Float32, Name, PublicKey, Struct, TimePoint, UInt16, UInt32, UInt64, UInt8 } from "@greymass/eosio";
let AccountAuth = class AccountAuth extends Struct {
};
__decorate([
    Struct.field(PublicKey, { array: true }),
    __metadata("design:type", Array)
], AccountAuth.prototype, "keys", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountAuth.prototype, "nonce", void 0);
AccountAuth = __decorate([
    Struct.type("AccountAuth")
], AccountAuth);
export { AccountAuth };
let AccountPowerMod = class AccountPowerMod extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], AccountPowerMod.prototype, "pwr_multiplier", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPowerMod.prototype, "pwr_add_per_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPowerMod.prototype, "expires_round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountPowerMod.prototype, "aggregate_pwr_remaining", void 0);
AccountPowerMod = __decorate([
    Struct.type("AccountPowerMod")
], AccountPowerMod);
export { AccountPowerMod };
let AccountPower = class AccountPower extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPower.prototype, "last_claimed_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPower.prototype, "rating", void 0);
__decorate([
    Struct.field(AccountPowerMod, { array: true }),
    __metadata("design:type", Array)
], AccountPower.prototype, "mods", void 0);
AccountPower = __decorate([
    Struct.type("AccountPower")
], AccountPower);
export { AccountPower };
let TokenUnstake = class TokenUnstake extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], TokenUnstake.prototype, "redeemable_after_round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], TokenUnstake.prototype, "quantity", void 0);
TokenUnstake = __decorate([
    Struct.type("TokenUnstake")
], TokenUnstake);
export { TokenUnstake };
let AccountStake = class AccountStake extends Struct {
};
__decorate([
    Struct.field(TokenUnstake, { array: true }),
    __metadata("design:type", Array)
], AccountStake.prototype, "unstaking", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountStake.prototype, "self_staked", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountStake.prototype, "received_delegated_stake", void 0);
AccountStake = __decorate([
    Struct.type("AccountStake")
], AccountStake);
export { AccountStake };
let AccountTeam = class AccountTeam extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountTeam.prototype, "team_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountTeam.prototype, "last_edit_round", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], AccountTeam.prototype, "team_tax_mult", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountTeam.prototype, "team_cumulative_contribution", void 0);
AccountTeam = __decorate([
    Struct.type("AccountTeam")
], AccountTeam);
export { AccountTeam };
let Config = class Config extends Struct {
};
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Config.prototype, "paused", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Config.prototype, "min_consensus_weight", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "min_consensus_pct", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "collateral_pct_pay_per_round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Config.prototype, "round_bonus_pay_reports", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Config.prototype, "round_bonus_pay_proposed", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "slash_threshold_pct", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Config.prototype, "slash_quantity_static", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "slash_quantity_collateral_pct", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Config.prototype, "withdraw_rounds_wait", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Config.prototype, "keep_finalized_stats_rows", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Config.prototype, "reports_finalized_after_rounds", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Config.prototype, "unlock_wait_rounds", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Config.prototype, "standby_toggle_interval_rounds", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "weight_collateral_pwr", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Config.prototype, "oracle_collateral_deposit_increment", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "reports_accumulate_weight_round_pct", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Config.prototype, "weight_collateral_divisor", void 0);
Config = __decorate([
    Struct.type("Config")
], Config);
export { Config };
let ConfigAccount = class ConfigAccount extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAccount.prototype, "purchase_price", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAccount.prototype, "max_owners", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAccount.prototype, "max_sponsors", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAccount.prototype, "max_pwrmods", void 0);
__decorate([
    Struct.field("string[]"),
    __metadata("design:type", Array)
], ConfigAccount.prototype, "suffix_whitelist", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAccount.prototype, "remove_sponsor_price", void 0);
ConfigAccount = __decorate([
    Struct.type("ConfigAccount")
], ConfigAccount);
export { ConfigAccount };
let ConfigAuth = class ConfigAuth extends Struct {
};
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], ConfigAuth.prototype, "key_actions_whitelist", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAuth.prototype, "key_account_max_stake", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAuth.prototype, "key_account_max_balance", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAuth.prototype, "account_max_keys", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAuth.prototype, "worker_max_bill_per_action", void 0);
ConfigAuth = __decorate([
    Struct.type("ConfigAuth")
], ConfigAuth);
export { ConfigAuth };
let ConfigAutoAdjust = class ConfigAutoAdjust extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAutoAdjust.prototype, "target_inflation_per_round", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigAutoAdjust.prototype, "power_mult_max_adjust", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigAutoAdjust.prototype, "powered_stake_mult_max_adjust", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigAutoAdjust.prototype, "adjustment_interval_rounds", void 0);
ConfigAutoAdjust = __decorate([
    Struct.type("ConfigAutoAdjust")
], ConfigAutoAdjust);
export { ConfigAutoAdjust };
let ConfigMint = class ConfigMint extends Struct {
};
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigMint.prototype, "round_powered_stake_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigMint.prototype, "round_power_mult", void 0);
ConfigMint = __decorate([
    Struct.type("ConfigMint")
], ConfigMint);
export { ConfigMint };
let ConfigNft = class ConfigNft extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigNft.prototype, "boid_id_maximum_nfts", void 0);
ConfigNft = __decorate([
    Struct.type("ConfigNft")
], ConfigNft);
export { ConfigNft };
let ConfigPower = class ConfigPower extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigPower.prototype, "round_decay_constant", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "round_decay_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "sponsor_tax_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "powered_stake_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "powered_stake_pwr", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigPower.prototype, "claim_maximum_elapsed_rounds", void 0);
ConfigPower = __decorate([
    Struct.type("ConfigPower")
], ConfigPower);
export { ConfigPower };
let ConfigStake = class ConfigStake extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigStake.prototype, "unstake_rounds", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigStake.prototype, "extra_stake_min_locked_rounds", void 0);
ConfigStake = __decorate([
    Struct.type("ConfigStake")
], ConfigStake);
export { ConfigStake };
let ConfigTeam = class ConfigTeam extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "change_min_rounds", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "edit_team_min_rounds", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "team_edit_max_pct_change", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigTeam.prototype, "buy_team_cost", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigTeam.prototype, "owner_stake_required", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "owner_future_stake_lock_rounds_required", void 0);
ConfigTeam = __decorate([
    Struct.type("ConfigTeam")
], ConfigTeam);
export { ConfigTeam };
let ConfigTime = class ConfigTime extends Struct {
};
__decorate([
    Struct.field(TimePoint),
    __metadata("design:type", TimePoint)
], ConfigTime.prototype, "rounds_start", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigTime.prototype, "round_length_sec", void 0);
ConfigTime = __decorate([
    Struct.type("ConfigTime")
], ConfigTime);
export { ConfigTime };
let ExtendedSymbol = class ExtendedSymbol extends Struct {
};
__decorate([
    Struct.field(Asset.Symbol),
    __metadata("design:type", Asset.Symbol)
], ExtendedSymbol.prototype, "sym", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], ExtendedSymbol.prototype, "contract", void 0);
ExtendedSymbol = __decorate([
    Struct.type("ExtendedSymbol")
], ExtendedSymbol);
export { ExtendedSymbol };
let GlobalReports = class GlobalReports extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], GlobalReports.prototype, "merged", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], GlobalReports.prototype, "unreported_and_unmerged", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], GlobalReports.prototype, "reported", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], GlobalReports.prototype, "proposed", void 0);
GlobalReports = __decorate([
    Struct.type("GlobalReports")
], GlobalReports);
export { GlobalReports };
let Global = class Global extends Struct {
};
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], Global.prototype, "active_oracles", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], Global.prototype, "expected_active_oracles", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Global.prototype, "standby_oracles", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Global.prototype, "expected_active_weight", void 0);
__decorate([
    Struct.field(GlobalReports),
    __metadata("design:type", GlobalReports)
], Global.prototype, "reports", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Global.prototype, "rewards_paid", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Global.prototype, "active_weight", void 0);
Global = __decorate([
    Struct.type("Global")
], Global);
export { Global };
let OracleCollateral = class OracleCollateral extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OracleCollateral.prototype, "locked", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OracleCollateral.prototype, "unlocking", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OracleCollateral.prototype, "slashed", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OracleCollateral.prototype, "unlock_finished_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OracleCollateral.prototype, "min_unlock_start_round", void 0);
OracleCollateral = __decorate([
    Struct.type("OracleCollateral")
], OracleCollateral);
export { OracleCollateral };
let OracleFunds = class OracleFunds extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OracleFunds.prototype, "claimed", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OracleFunds.prototype, "unclaimed", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OracleFunds.prototype, "withdrawing", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OracleFunds.prototype, "withdrawable_after_round", void 0);
OracleFunds = __decorate([
    Struct.type("OracleFunds")
], OracleFunds);
export { OracleFunds };
let Oracle = class Oracle extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Oracle.prototype, "account", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Oracle.prototype, "weight", void 0);
__decorate([
    Struct.field(OracleCollateral),
    __metadata("design:type", OracleCollateral)
], Oracle.prototype, "collateral", void 0);
__decorate([
    Struct.field(OracleFunds),
    __metadata("design:type", OracleFunds)
], Oracle.prototype, "funds", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Oracle.prototype, "standby", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Oracle.prototype, "last_standby_toggle_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Oracle.prototype, "expected_active_after_round", void 0);
Oracle = __decorate([
    Struct.type("Oracle")
], Oracle);
export { Oracle };
let Reports = class Reports extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Reports.prototype, "proposed", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Reports.prototype, "reported_merged", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Reports.prototype, "unreported_unmerged", void 0);
Reports = __decorate([
    Struct.type("Reports")
], Reports);
export { Reports };
let OracleStat = class OracleStat extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OracleStat.prototype, "round", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], OracleStat.prototype, "weight", void 0);
__decorate([
    Struct.field(Reports),
    __metadata("design:type", Reports)
], OracleStat.prototype, "reports", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], OracleStat.prototype, "processed", void 0);
OracleStat = __decorate([
    Struct.type("OracleStat")
], OracleStat);
export { OracleStat };
let Protocol = class Protocol extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Protocol.prototype, "protocol_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Protocol.prototype, "protocol_name", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], Protocol.prototype, "unitPowerMult", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Protocol.prototype, "active", void 0);
Protocol = __decorate([
    Struct.type("Protocol")
], Protocol);
export { Protocol };
let PwrReport = class PwrReport extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], PwrReport.prototype, "protocol_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PwrReport.prototype, "round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], PwrReport.prototype, "units", void 0);
PwrReport = __decorate([
    Struct.type("PwrReport")
], PwrReport);
export { PwrReport };
let PwrReportRow = class PwrReportRow extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], PwrReportRow.prototype, "report_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PwrReportRow.prototype, "proposer", void 0);
__decorate([
    Struct.field(PwrReport),
    __metadata("design:type", PwrReport)
], PwrReportRow.prototype, "report", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], PwrReportRow.prototype, "approvals", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PwrReportRow.prototype, "approval_weight", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], PwrReportRow.prototype, "reported", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], PwrReportRow.prototype, "merged", void 0);
PwrReportRow = __decorate([
    Struct.type("PwrReportRow")
], PwrReportRow);
export { PwrReportRow };
let Stat = class Stat extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Stat.prototype, "round", void 0);
__decorate([
    Struct.field(Global),
    __metadata("design:type", Global)
], Stat.prototype, "starting_global", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stat.prototype, "reported_since_previous", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stat.prototype, "unreported_unmerged_since_previous", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stat.prototype, "proposed_since_previous", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stat.prototype, "rewarded_since_previous", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stat.prototype, "valid_proposed_since_previous", void 0);
Stat = __decorate([
    Struct.type("Stat")
], Stat);
export { Stat };
let Configclear = class Configclear extends Struct {
};
Configclear = __decorate([
    Struct.type("configclear")
], Configclear);
export { Configclear };
let Configset = class Configset extends Struct {
};
__decorate([
    Struct.field(Config),
    __metadata("design:type", Config)
], Configset.prototype, "config", void 0);
Configset = __decorate([
    Struct.type("configset")
], Configset);
export { Configset };
let Finishreport = class Finishreport extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Finishreport.prototype, "boid_id_scope", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Finishreport.prototype, "pwrreport_id", void 0);
Finishreport = __decorate([
    Struct.type("finishreport")
], Finishreport);
export { Finishreport };
let Globalclear = class Globalclear extends Struct {
};
Globalclear = __decorate([
    Struct.type("globalclear")
], Globalclear);
export { Globalclear };
let Handleostat = class Handleostat extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Handleostat.prototype, "oracle", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Handleostat.prototype, "round", void 0);
Handleostat = __decorate([
    Struct.type("handleostat")
], Handleostat);
export { Handleostat };
let Mergereports = class Mergereports extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Mergereports.prototype, "boid_id_scope", void 0);
__decorate([
    Struct.field(UInt64, { array: true }),
    __metadata("design:type", Array)
], Mergereports.prototype, "pwrreport_ids", void 0);
Mergereports = __decorate([
    Struct.type("mergereports")
], Mergereports);
export { Mergereports };
let Oracldeposit = class Oracldeposit extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Oracldeposit.prototype, "oracle", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Oracldeposit.prototype, "depositQuantity", void 0);
Oracldeposit = __decorate([
    Struct.type("oracldeposit")
], Oracldeposit);
export { Oracldeposit };
let Oraclesclear = class Oraclesclear extends Struct {
};
Oraclesclear = __decorate([
    Struct.type("oraclesclear")
], Oraclesclear);
export { Oraclesclear };
let Oracleset = class Oracleset extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Oracleset.prototype, "account", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Oracleset.prototype, "weight", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Oracleset.prototype, "adding_collateral", void 0);
Oracleset = __decorate([
    Struct.type("oracleset")
], Oracleset);
export { Oracleset };
let Ostatsclean = class Ostatsclean extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Ostatsclean.prototype, "scope", void 0);
Ostatsclean = __decorate([
    Struct.type("ostatsclean")
], Ostatsclean);
export { Ostatsclean };
let Payoracle = class Payoracle extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Payoracle.prototype, "oracle", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Payoracle.prototype, "basePay", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Payoracle.prototype, "bonusPay", void 0);
Payoracle = __decorate([
    Struct.type("payoracle")
], Payoracle);
export { Payoracle };
let Protoclear = class Protoclear extends Struct {
};
Protoclear = __decorate([
    Struct.type("protoclear")
], Protoclear);
export { Protoclear };
let Protoset = class Protoset extends Struct {
};
__decorate([
    Struct.field(Protocol),
    __metadata("design:type", Protocol)
], Protoset.prototype, "protocol", void 0);
Protoset = __decorate([
    Struct.type("protoset")
], Protoset);
export { Protoset };
let PwrReportAction = class PwrReportAction extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PwrReportAction.prototype, "oracle", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PwrReportAction.prototype, "boid_id_scope", void 0);
__decorate([
    Struct.field(PwrReport),
    __metadata("design:type", PwrReport)
], PwrReportAction.prototype, "report", void 0);
PwrReportAction = __decorate([
    Struct.type("pwrreportaction")
], PwrReportAction);
export { PwrReportAction };
let Reportsclean = class Reportsclean extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Reportsclean.prototype, "scope", void 0);
Reportsclean = __decorate([
    Struct.type("reportsclean")
], Reportsclean);
export { Reportsclean };
let Roundstats = class Roundstats extends Struct {
};
Roundstats = __decorate([
    Struct.type("roundstats")
], Roundstats);
export { Roundstats };
let Setstandby = class Setstandby extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Setstandby.prototype, "oracle", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Setstandby.prototype, "standby", void 0);
Setstandby = __decorate([
    Struct.type("setstandby")
], Setstandby);
export { Setstandby };
let Slashabsent = class Slashabsent extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Slashabsent.prototype, "oracle", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Slashabsent.prototype, "round", void 0);
Slashabsent = __decorate([
    Struct.type("slashabsent")
], Slashabsent);
export { Slashabsent };
let Slashmulti = class Slashmulti extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Slashmulti.prototype, "oracle", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Slashmulti.prototype, "boid_id_scope", void 0);
__decorate([
    Struct.field(UInt64, { array: true }),
    __metadata("design:type", Array)
], Slashmulti.prototype, "pwrreport_ids", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Slashmulti.prototype, "protocol_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Slashmulti.prototype, "round", void 0);
Slashmulti = __decorate([
    Struct.type("slashmulti")
], Slashmulti);
export { Slashmulti };
let Slashoracle = class Slashoracle extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Slashoracle.prototype, "oracle", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Slashoracle.prototype, "quantity", void 0);
Slashoracle = __decorate([
    Struct.type("slashoracle")
], Slashoracle);
export { Slashoracle };
let Statsclean = class Statsclean extends Struct {
};
Statsclean = __decorate([
    Struct.type("statsclean")
], Statsclean);
export { Statsclean };
let Thisround = class Thisround extends Struct {
};
Thisround = __decorate([
    Struct.type("thisround")
], Thisround);
export { Thisround };
let Unlock = class Unlock extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Unlock.prototype, "oracle", void 0);
Unlock = __decorate([
    Struct.type("unlock")
], Unlock);
export { Unlock };
let Unlockinit = class Unlockinit extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Unlockinit.prototype, "oracle", void 0);
Unlockinit = __decorate([
    Struct.type("unlockinit")
], Unlockinit);
export { Unlockinit };
let Withdraw = class Withdraw extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Withdraw.prototype, "oracle", void 0);
Withdraw = __decorate([
    Struct.type("withdraw")
], Withdraw);
export { Withdraw };
let Withdrawinit = class Withdrawinit extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Withdrawinit.prototype, "oracle", void 0);
Withdrawinit = __decorate([
    Struct.type("withdrawinit")
], Withdrawinit);
export { Withdrawinit };
//# sourceMappingURL=power.boid.types.js.map