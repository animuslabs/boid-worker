// generated by @greymass/abi2core
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Asset, Bytes, Float32, Float64, Int16, Int32, Int64, Int8, Name, PublicKey, Signature, Struct, TimePoint, UInt16, UInt32, UInt64, UInt8, Variant } from "@greymass/eosio";
let AccountAuth = class AccountAuth extends Struct {
};
__decorate([
    Struct.field(PublicKey, { array: true }),
    __metadata("design:type", Array)
], AccountAuth.prototype, "keys", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountAuth.prototype, "nonce", void 0);
AccountAuth = __decorate([
    Struct.type("AccountAuth")
], AccountAuth);
export { AccountAuth };
let TokenUnstake = class TokenUnstake extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], TokenUnstake.prototype, "redeemable_after_round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], TokenUnstake.prototype, "quantity", void 0);
TokenUnstake = __decorate([
    Struct.type("TokenUnstake")
], TokenUnstake);
export { TokenUnstake };
let AccountStake = class AccountStake extends Struct {
};
__decorate([
    Struct.field(TokenUnstake, { array: true }),
    __metadata("design:type", Array)
], AccountStake.prototype, "unstaking", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountStake.prototype, "self_staked", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountStake.prototype, "received_delegated_stake", void 0);
AccountStake = __decorate([
    Struct.type("AccountStake")
], AccountStake);
export { AccountStake };
let AccountPowerMod = class AccountPowerMod extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], AccountPowerMod.prototype, "pwr_multiplier", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPowerMod.prototype, "pwr_add_per_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPowerMod.prototype, "expires_round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountPowerMod.prototype, "aggregate_pwr_remaining", void 0);
AccountPowerMod = __decorate([
    Struct.type("AccountPowerMod")
], AccountPowerMod);
export { AccountPowerMod };
let AccountPower = class AccountPower extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPower.prototype, "last_claimed_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountPower.prototype, "rating", void 0);
__decorate([
    Struct.field(AccountPowerMod, { array: true }),
    __metadata("design:type", Array)
], AccountPower.prototype, "mods", void 0);
AccountPower = __decorate([
    Struct.type("AccountPower")
], AccountPower);
export { AccountPower };
let AccountTeam = class AccountTeam extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountTeam.prototype, "team_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], AccountTeam.prototype, "last_edit_round", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], AccountTeam.prototype, "team_tax_mult", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], AccountTeam.prototype, "team_cumulative_contribution", void 0);
AccountTeam = __decorate([
    Struct.type("AccountTeam")
], AccountTeam);
export { AccountTeam };
let Account = class Account extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Account.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], Account.prototype, "owners", void 0);
__decorate([
    Struct.field(AccountAuth),
    __metadata("design:type", AccountAuth)
], Account.prototype, "auth", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], Account.prototype, "sponsors", void 0);
__decorate([
    Struct.field(AccountStake),
    __metadata("design:type", AccountStake)
], Account.prototype, "stake", void 0);
__decorate([
    Struct.field(AccountPower),
    __metadata("design:type", AccountPower)
], Account.prototype, "power", void 0);
__decorate([
    Struct.field(AccountTeam),
    __metadata("design:type", AccountTeam)
], Account.prototype, "team", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], Account.prototype, "social_ipfs_json", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Account.prototype, "balance", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Account.prototype, "nft_balance", void 0);
Account = __decorate([
    Struct.type("Account")
], Account);
export { Account };
let PermissionLevel = class PermissionLevel extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PermissionLevel.prototype, "actor", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PermissionLevel.prototype, "permission", void 0);
PermissionLevel = __decorate([
    Struct.type("PermissionLevel")
], PermissionLevel);
export { PermissionLevel };
let Action = class Action extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Action.prototype, "account", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Action.prototype, "name", void 0);
__decorate([
    Struct.field(PermissionLevel, { array: true }),
    __metadata("design:type", Array)
], Action.prototype, "authorization", void 0);
__decorate([
    Struct.field(Bytes),
    __metadata("design:type", Bytes)
], Action.prototype, "data", void 0);
Action = __decorate([
    Struct.type("Action")
], Action);
export { Action };
let AtomicValue = class AtomicValue extends Variant {
};
AtomicValue = __decorate([
    Variant.type("AtomicValue", [Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, Float32, Float64, { type: Int8, array: true }, { type: Int16, array: true }, { type: Int32, array: true }, { type: Int64, array: true }, Bytes, { type: UInt16, array: true }, { type: UInt32, array: true }, { type: UInt64, array: true }, { type: Float32, array: true }, { type: Float64, array: true }])
], AtomicValue);
let AtomicAttribute = class AtomicAttribute extends Struct {
};
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], AtomicAttribute.prototype, "key", void 0);
__decorate([
    Struct.field(AtomicValue),
    __metadata("design:type", AtomicValue)
], AtomicAttribute.prototype, "value", void 0);
AtomicAttribute = __decorate([
    Struct.type("AtomicAttribute")
], AtomicAttribute);
export { AtomicAttribute };
let AtomicFormat = class AtomicFormat extends Struct {
};
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], AtomicFormat.prototype, "name", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], AtomicFormat.prototype, "type", void 0);
AtomicFormat = __decorate([
    Struct.type("AtomicFormat")
], AtomicFormat);
export { AtomicFormat };
let Auth = class Auth extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Auth.prototype, "boid_id_auth", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Auth.prototype, "actions_num", void 0);
Auth = __decorate([
    Struct.type("Auth")
], Auth);
export { Auth };
let ConfigAccount = class ConfigAccount extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAccount.prototype, "purchase_price", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAccount.prototype, "max_owners", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAccount.prototype, "max_sponsors", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAccount.prototype, "max_pwrmods", void 0);
__decorate([
    Struct.field("string[]"),
    __metadata("design:type", Array)
], ConfigAccount.prototype, "suffix_whitelist", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAccount.prototype, "remove_sponsor_price", void 0);
ConfigAccount = __decorate([
    Struct.type("ConfigAccount")
], ConfigAccount);
export { ConfigAccount };
let ConfigPower = class ConfigPower extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigPower.prototype, "round_decay_constant", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "round_decay_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "sponsor_tax_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "powered_stake_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigPower.prototype, "powered_stake_pwr", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigPower.prototype, "claim_maximum_elapsed_rounds", void 0);
ConfigPower = __decorate([
    Struct.type("ConfigPower")
], ConfigPower);
export { ConfigPower };
let ConfigMint = class ConfigMint extends Struct {
};
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigMint.prototype, "round_powered_stake_mult", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigMint.prototype, "round_power_mult", void 0);
ConfigMint = __decorate([
    Struct.type("ConfigMint")
], ConfigMint);
export { ConfigMint };
let ConfigTeam = class ConfigTeam extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "change_min_rounds", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "edit_team_min_rounds", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "team_edit_max_pct_change", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigTeam.prototype, "buy_team_cost", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigTeam.prototype, "owner_stake_required", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigTeam.prototype, "owner_future_stake_lock_rounds_required", void 0);
ConfigTeam = __decorate([
    Struct.type("ConfigTeam")
], ConfigTeam);
export { ConfigTeam };
let ConfigStake = class ConfigStake extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigStake.prototype, "unstake_rounds", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigStake.prototype, "extra_stake_min_locked_rounds", void 0);
ConfigStake = __decorate([
    Struct.type("ConfigStake")
], ConfigStake);
export { ConfigStake };
let ConfigTime = class ConfigTime extends Struct {
};
__decorate([
    Struct.field(TimePoint),
    __metadata("design:type", TimePoint)
], ConfigTime.prototype, "rounds_start", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigTime.prototype, "round_length_sec", void 0);
ConfigTime = __decorate([
    Struct.type("ConfigTime")
], ConfigTime);
export { ConfigTime };
let ConfigAuth = class ConfigAuth extends Struct {
};
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], ConfigAuth.prototype, "key_actions_whitelist", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAuth.prototype, "key_account_max_stake", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAuth.prototype, "key_account_max_balance", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], ConfigAuth.prototype, "account_max_keys", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAuth.prototype, "worker_max_bill_per_action", void 0);
ConfigAuth = __decorate([
    Struct.type("ConfigAuth")
], ConfigAuth);
export { ConfigAuth };
let ConfigNft = class ConfigNft extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigNft.prototype, "boid_id_maximum_nfts", void 0);
ConfigNft = __decorate([
    Struct.type("ConfigNft")
], ConfigNft);
export { ConfigNft };
let ConfigAutoAdjust = class ConfigAutoAdjust extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], ConfigAutoAdjust.prototype, "target_inflation_per_round", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigAutoAdjust.prototype, "power_mult_max_adjust", void 0);
__decorate([
    Struct.field(Float32),
    __metadata("design:type", Float32)
], ConfigAutoAdjust.prototype, "powered_stake_mult_max_adjust", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], ConfigAutoAdjust.prototype, "adjustment_interval_rounds", void 0);
ConfigAutoAdjust = __decorate([
    Struct.type("ConfigAutoAdjust")
], ConfigAutoAdjust);
export { ConfigAutoAdjust };
let Config = class Config extends Struct {
};
__decorate([
    Struct.field(ConfigAccount),
    __metadata("design:type", ConfigAccount)
], Config.prototype, "account", void 0);
__decorate([
    Struct.field(ConfigPower),
    __metadata("design:type", ConfigPower)
], Config.prototype, "power", void 0);
__decorate([
    Struct.field(ConfigMint),
    __metadata("design:type", ConfigMint)
], Config.prototype, "mint", void 0);
__decorate([
    Struct.field(ConfigTeam),
    __metadata("design:type", ConfigTeam)
], Config.prototype, "team", void 0);
__decorate([
    Struct.field(ConfigStake),
    __metadata("design:type", ConfigStake)
], Config.prototype, "stake", void 0);
__decorate([
    Struct.field(ConfigTime),
    __metadata("design:type", ConfigTime)
], Config.prototype, "time", void 0);
__decorate([
    Struct.field(ConfigAuth),
    __metadata("design:type", ConfigAuth)
], Config.prototype, "auth", void 0);
__decorate([
    Struct.field(ConfigNft),
    __metadata("design:type", ConfigNft)
], Config.prototype, "nft", void 0);
__decorate([
    Struct.field(ConfigAutoAdjust),
    __metadata("design:type", ConfigAutoAdjust)
], Config.prototype, "auto", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Config.prototype, "paused", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Config.prototype, "allow_deposits", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], Config.prototype, "allow_withdrawals", void 0);
Config = __decorate([
    Struct.type("Config")
], Config);
export { Config };
let Deposits = class Deposits extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Deposits.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Deposits.prototype, "boid_quantity", void 0);
Deposits = __decorate([
    Struct.type("Deposits")
], Deposits);
export { Deposits };
let ExtendedSymbol = class ExtendedSymbol extends Struct {
};
__decorate([
    Struct.field(Asset.Symbol),
    __metadata("design:type", Asset.Symbol)
], ExtendedSymbol.prototype, "sym", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], ExtendedSymbol.prototype, "contract", void 0);
ExtendedSymbol = __decorate([
    Struct.type("ExtendedSymbol")
], ExtendedSymbol);
export { ExtendedSymbol };
let Global = class Global extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Global.prototype, "total_accounts", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Global.prototype, "total_power", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Global.prototype, "total_liquid_balance", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Global.prototype, "total_stake", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Global.prototype, "last_rebalance_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Global.prototype, "last_inflation_adjust_round", void 0);
Global = __decorate([
    Struct.type("Global")
], Global);
export { Global };
let MintLog = class MintLog extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], MintLog.prototype, "account", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], MintLog.prototype, "team", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], MintLog.prototype, "team_owner", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], MintLog.prototype, "overstake", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], MintLog.prototype, "total", void 0);
MintLog = __decorate([
    Struct.type("MintLog")
], MintLog);
export { MintLog };
let NFT = class NFT extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], NFT.prototype, "asset_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], NFT.prototype, "locked_until_round", void 0);
NFT = __decorate([
    Struct.type("NFT")
], NFT);
export { NFT };
let NFTMint = class NFTMint extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NFTMint.prototype, "mint_receiver_boid_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], NFTMint.prototype, "mint_quantity_remaining", void 0);
NFTMint = __decorate([
    Struct.type("NFTMint")
], NFTMint);
export { NFTMint };
let NftAction = class NftAction extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftAction.prototype, "collection_name", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftAction.prototype, "schema_name", void 0);
__decorate([
    Struct.field(Int32),
    __metadata("design:type", Int32)
], NftAction.prototype, "template_id", void 0);
__decorate([
    Struct.field(AtomicAttribute, { array: true }),
    __metadata("design:type", Array)
], NftAction.prototype, "match_immutable_attributes", void 0);
__decorate([
    Struct.field(AtomicAttribute, { array: true }),
    __metadata("design:type", Array)
], NftAction.prototype, "match_mutable_attributes", void 0);
__decorate([
    Struct.field("bool"),
    __metadata("design:type", Boolean)
], NftAction.prototype, "burn", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], NftAction.prototype, "lock_rounds", void 0);
NftAction = __decorate([
    Struct.type("NftAction")
], NftAction);
export { NftAction };
let NftMint = class NftMint extends Struct {
};
__decorate([
    Struct.field(Int32),
    __metadata("design:type", Int32)
], NftMint.prototype, "mint_template_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftMint.prototype, "mint_schema_name", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftMint.prototype, "mint_collection_name", void 0);
__decorate([
    Struct.field(AtomicAttribute, { array: true }),
    __metadata("design:type", Array)
], NftMint.prototype, "immutable_data", void 0);
__decorate([
    Struct.field(AtomicAttribute, { array: true }),
    __metadata("design:type", Array)
], NftMint.prototype, "mutable_data", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], NftMint.prototype, "quantity", void 0);
NftMint = __decorate([
    Struct.type("NftMint")
], NftMint);
export { NftMint };
let OfferRequirements = class OfferRequirements extends Struct {
};
__decorate([
    Struct.field(UInt16, { array: true }),
    __metadata("design:type", Array)
], OfferRequirements.prototype, "team_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OfferRequirements.prototype, "min_power", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OfferRequirements.prototype, "min_balance", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OfferRequirements.prototype, "min_stake", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OfferRequirements.prototype, "min_cumulative_team_contribution", void 0);
OfferRequirements = __decorate([
    Struct.type("OfferRequirements")
], OfferRequirements);
export { OfferRequirements };
let OfferAction = class OfferAction extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OfferAction.prototype, "delegated_stake", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OfferAction.prototype, "stake_locked_additional_rounds", void 0);
__decorate([
    Struct.field(NftAction, { array: true }),
    __metadata("design:type", Array)
], OfferAction.prototype, "nft_actions", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OfferAction.prototype, "balance_payment", void 0);
OfferAction = __decorate([
    Struct.type("OfferAction")
], OfferAction);
export { OfferAction };
let OfferRewards = class OfferRewards extends Struct {
};
__decorate([
    Struct.field(NftMint, { array: true }),
    __metadata("design:type", Array)
], OfferRewards.prototype, "nft_mints", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OfferRewards.prototype, "balance_deposit", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OfferRewards.prototype, "delegated_stake", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OfferRewards.prototype, "stake_locked_additional_rounds", void 0);
__decorate([
    Struct.field(Bytes),
    __metadata("design:type", Bytes)
], OfferRewards.prototype, "activate_powermod_ids", void 0);
OfferRewards = __decorate([
    Struct.type("OfferRewards")
], OfferRewards);
export { OfferRewards };
let OfferLimits = class OfferLimits extends Struct {
};
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], OfferLimits.prototype, "offer_quantity_remaining", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], OfferLimits.prototype, "available_until_round", void 0);
OfferLimits = __decorate([
    Struct.type("OfferLimits")
], OfferLimits);
export { OfferLimits };
let Offer = class Offer extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Offer.prototype, "offer_id", void 0);
__decorate([
    Struct.field(OfferRequirements),
    __metadata("design:type", OfferRequirements)
], Offer.prototype, "requirements", void 0);
__decorate([
    Struct.field(OfferAction),
    __metadata("design:type", OfferAction)
], Offer.prototype, "actions", void 0);
__decorate([
    Struct.field(OfferRewards),
    __metadata("design:type", OfferRewards)
], Offer.prototype, "rewards", void 0);
__decorate([
    Struct.field(OfferLimits),
    __metadata("design:type", OfferLimits)
], Offer.prototype, "limits", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Offer.prototype, "total_claimed", void 0);
Offer = __decorate([
    Struct.type("Offer")
], Offer);
export { Offer };
let PowerClaimLog = class PowerClaimLog extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PowerClaimLog.prototype, "before", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PowerClaimLog.prototype, "after", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PowerClaimLog.prototype, "from_mods", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PowerClaimLog.prototype, "decayed", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PowerClaimLog.prototype, "rounds", void 0);
PowerClaimLog = __decorate([
    Struct.type("PowerClaimLog")
], PowerClaimLog);
export { PowerClaimLog };
let PwrMod = class PwrMod extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], PwrMod.prototype, "mod_id", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], PwrMod.prototype, "pwr_multiplier", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PwrMod.prototype, "pwr_add_per_round", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PwrMod.prototype, "expire_after_elapsed_rounds", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], PwrMod.prototype, "aggregate_pwr_capacity", void 0);
PwrMod = __decorate([
    Struct.type("PwrMod")
], PwrMod);
export { PwrMod };
let Stake = class Stake extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], Stake.prototype, "stake_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Stake.prototype, "from_boid_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Stake.prototype, "to_boid_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Stake.prototype, "stake_quantity", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Stake.prototype, "locked_until_round", void 0);
Stake = __decorate([
    Struct.type("Stake")
], Stake);
export { Stake };
let Stats = class Stats extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Stats.prototype, "round", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stats.prototype, "power_added", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stats.prototype, "boid_generated", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Stats.prototype, "accounts_created", void 0);
Stats = __decorate([
    Struct.type("Stats")
], Stats);
export { Stats };
let Team = class Team extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Team.prototype, "team_id", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Team.prototype, "balance", void 0);
__decorate([
    Struct.field(AccountStake),
    __metadata("design:type", AccountStake)
], Team.prototype, "stake", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Team.prototype, "owner", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], Team.prototype, "managers", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Team.prototype, "min_pwr_tax_mult", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], Team.prototype, "owner_cut_mult", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], Team.prototype, "url_safe_name", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], Team.prototype, "info_json_ipfs", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Team.prototype, "power", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Team.prototype, "members", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Team.prototype, "last_edit_round", void 0);
Team = __decorate([
    Struct.type("Team")
], Team);
export { Team };
let AccountAdd = class AccountAdd extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AccountAdd.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], AccountAdd.prototype, "owners", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], AccountAdd.prototype, "sponsors", void 0);
__decorate([
    Struct.field(PublicKey, { array: true }),
    __metadata("design:type", Array)
], AccountAdd.prototype, "keys", void 0);
AccountAdd = __decorate([
    Struct.type("account.add")
], AccountAdd);
export { AccountAdd };
let AccountBuy = class AccountBuy extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AccountBuy.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], AccountBuy.prototype, "owners", void 0);
__decorate([
    Struct.field(PublicKey, { array: true }),
    __metadata("design:type", Array)
], AccountBuy.prototype, "keys", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AccountBuy.prototype, "sponsor", void 0);
AccountBuy = __decorate([
    Struct.type("account.buy")
], AccountBuy);
export { AccountBuy };
let AccountEdit = class AccountEdit extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AccountEdit.prototype, "boid_id", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], AccountEdit.prototype, "social_ipfs_json", void 0);
AccountEdit = __decorate([
    Struct.type("account.edit")
], AccountEdit);
export { AccountEdit };
let AccountFree = class AccountFree extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AccountFree.prototype, "boid_id", void 0);
AccountFree = __decorate([
    Struct.type("account.free")
], AccountFree);
export { AccountFree };
let AuthAction = class AuthAction extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AuthAction.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Action, { array: true }),
    __metadata("design:type", Array)
], AuthAction.prototype, "actions", void 0);
__decorate([
    Struct.field(Signature),
    __metadata("design:type", Signature)
], AuthAction.prototype, "sig", void 0);
__decorate([
    Struct.field(Int32),
    __metadata("design:type", Int32)
], AuthAction.prototype, "keyIndex", void 0);
AuthAction = __decorate([
    Struct.type("auth")
], AuthAction);
export { AuthAction };
let AuthAddkey = class AuthAddkey extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AuthAddkey.prototype, "boid_id", void 0);
__decorate([
    Struct.field(PublicKey),
    __metadata("design:type", PublicKey)
], AuthAddkey.prototype, "key", void 0);
AuthAddkey = __decorate([
    Struct.type("authaddkey")
], AuthAddkey);
export { AuthAddkey };
let AuthInit = class AuthInit extends Struct {
};
AuthInit = __decorate([
    Struct.type("authinit")
], AuthInit);
export { AuthInit };
let AuthRmkey = class AuthRmkey extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], AuthRmkey.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Int32),
    __metadata("design:type", Int32)
], AuthRmkey.prototype, "keyIndex", void 0);
AuthRmkey = __decorate([
    Struct.type("authrmkey")
], AuthRmkey);
export { AuthRmkey };
let ConfigClear = class ConfigClear extends Struct {
};
ConfigClear = __decorate([
    Struct.type("configclear")
], ConfigClear);
export { ConfigClear };
let ConfigSet = class ConfigSet extends Struct {
};
__decorate([
    Struct.field(Config),
    __metadata("design:type", Config)
], ConfigSet.prototype, "config", void 0);
ConfigSet = __decorate([
    Struct.type("configset")
], ConfigSet);
export { ConfigSet };
let GlobalClear = class GlobalClear extends Struct {
};
GlobalClear = __decorate([
    Struct.type("globalclear")
], GlobalClear);
export { GlobalClear };
let GlobalSet = class GlobalSet extends Struct {
};
__decorate([
    Struct.field(Global),
    __metadata("design:type", Global)
], GlobalSet.prototype, "globalData", void 0);
GlobalSet = __decorate([
    Struct.type("globalset")
], GlobalSet);
export { GlobalSet };
let Internalxfer = class Internalxfer extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Internalxfer.prototype, "from_boid_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Internalxfer.prototype, "to_boid_id", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Internalxfer.prototype, "quantity", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], Internalxfer.prototype, "memo", void 0);
Internalxfer = __decorate([
    Struct.type("internalxfer")
], Internalxfer);
export { Internalxfer };
let Logpwradd = class Logpwradd extends Struct {
};
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Logpwradd.prototype, "received", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Logpwradd.prototype, "from_mult_mods", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Logpwradd.prototype, "diverted_to_sponsor", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], Logpwradd.prototype, "power_increased", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Logpwradd.prototype, "orign", void 0);
Logpwradd = __decorate([
    Struct.type("logpwradd")
], Logpwradd);
export { Logpwradd };
let Logpwrclaim = class Logpwrclaim extends Struct {
};
__decorate([
    Struct.field(PowerClaimLog),
    __metadata("design:type", PowerClaimLog)
], Logpwrclaim.prototype, "power", void 0);
__decorate([
    Struct.field(MintLog),
    __metadata("design:type", MintLog)
], Logpwrclaim.prototype, "mint", void 0);
Logpwrclaim = __decorate([
    Struct.type("logpwrclaim")
], Logpwrclaim);
export { Logpwrclaim };
let NftLock = class NftLock extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftLock.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], NftLock.prototype, "asset_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], NftLock.prototype, "locked_until_round", void 0);
NftLock = __decorate([
    Struct.type("nftlock")
], NftLock);
export { NftLock };
let NftReceiver = class NftReceiver extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftReceiver.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], NftReceiver.prototype, "mint_quantity", void 0);
NftReceiver = __decorate([
    Struct.type("nftreceiver")
], NftReceiver);
export { NftReceiver };
let NftWithdraw = class NftWithdraw extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftWithdraw.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt64, { array: true }),
    __metadata("design:type", Array)
], NftWithdraw.prototype, "asset_ids", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftWithdraw.prototype, "to", void 0);
NftWithdraw = __decorate([
    Struct.type("nftwithdraw")
], NftWithdraw);
export { NftWithdraw };
let NftXfer = class NftXfer extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftXfer.prototype, "from_boid_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], NftXfer.prototype, "to_boid_id", void 0);
__decorate([
    Struct.field(UInt64, { array: true }),
    __metadata("design:type", Array)
], NftXfer.prototype, "asset_ids", void 0);
NftXfer = __decorate([
    Struct.type("nftxfer")
], NftXfer);
export { NftXfer };
let OfferAdd = class OfferAdd extends Struct {
};
__decorate([
    Struct.field(OfferRequirements),
    __metadata("design:type", OfferRequirements)
], OfferAdd.prototype, "requirements", void 0);
__decorate([
    Struct.field(OfferAction),
    __metadata("design:type", OfferAction)
], OfferAdd.prototype, "actions", void 0);
__decorate([
    Struct.field(OfferRewards),
    __metadata("design:type", OfferRewards)
], OfferAdd.prototype, "rewards", void 0);
__decorate([
    Struct.field(OfferLimits),
    __metadata("design:type", OfferLimits)
], OfferAdd.prototype, "limits", void 0);
OfferAdd = __decorate([
    Struct.type("offeradd")
], OfferAdd);
export { OfferAdd };
let OfferClaim = class OfferClaim extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], OfferClaim.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], OfferClaim.prototype, "offer_id", void 0);
__decorate([
    Struct.field(UInt64, { array: true }),
    __metadata("design:type", Array)
], OfferClaim.prototype, "required_nft_action_ids", void 0);
OfferClaim = __decorate([
    Struct.type("offerclaim")
], OfferClaim);
export { OfferClaim };
let OwnerAdd = class OwnerAdd extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], OwnerAdd.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], OwnerAdd.prototype, "owner", void 0);
OwnerAdd = __decorate([
    Struct.type("owneradd")
], OwnerAdd);
export { OwnerAdd };
let OwnerRm = class OwnerRm extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], OwnerRm.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], OwnerRm.prototype, "owner", void 0);
OwnerRm = __decorate([
    Struct.type("ownerrm")
], OwnerRm);
export { OwnerRm };
let PowerAdd = class PowerAdd extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PowerAdd.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], PowerAdd.prototype, "power", void 0);
PowerAdd = __decorate([
    Struct.type("poweradd")
], PowerAdd);
export { PowerAdd };
let PowerClaim = class PowerClaim extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PowerClaim.prototype, "boid_id", void 0);
PowerClaim = __decorate([
    Struct.type("powerclaim")
], PowerClaim);
export { PowerClaim };
let PwrmodAdd = class PwrmodAdd extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PwrmodAdd.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], PwrmodAdd.prototype, "mod_id", void 0);
PwrmodAdd = __decorate([
    Struct.type("pwrmodadd")
], PwrmodAdd);
export { PwrmodAdd };
let PwrmodNew = class PwrmodNew extends Struct {
};
__decorate([
    Struct.field(PwrMod),
    __metadata("design:type", PwrMod)
], PwrmodNew.prototype, "mod", void 0);
PwrmodNew = __decorate([
    Struct.type("pwrmodnew")
], PwrmodNew);
export { PwrmodNew };
let PwrmodRm = class PwrmodRm extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], PwrmodRm.prototype, "boid_id", void 0);
__decorate([
    Struct.field(Int32),
    __metadata("design:type", Int32)
], PwrmodRm.prototype, "pwrmod_index", void 0);
PwrmodRm = __decorate([
    Struct.type("pwrmodrm")
], PwrmodRm);
export { PwrmodRm };
let Rebalance = class Rebalance extends Struct {
};
Rebalance = __decorate([
    Struct.type("rebalance")
], Rebalance);
export { Rebalance };
let StakeAction = class StakeAction extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], StakeAction.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], StakeAction.prototype, "quantity", void 0);
StakeAction = __decorate([
    Struct.type("stake")
], StakeAction);
export { StakeAction };
let StakeDeleg = class StakeDeleg extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], StakeDeleg.prototype, "from_boid_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], StakeDeleg.prototype, "to_boid_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], StakeDeleg.prototype, "stake_quantity", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], StakeDeleg.prototype, "lock_until_round", void 0);
StakeDeleg = __decorate([
    Struct.type("stakedeleg")
], StakeDeleg);
export { StakeDeleg };
let StatsClean = class StatsClean extends Struct {
};
StatsClean = __decorate([
    Struct.type("statsclean")
], StatsClean);
export { StatsClean };
let TeamChange = class TeamChange extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], TeamChange.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt16),
    __metadata("design:type", UInt16)
], TeamChange.prototype, "new_team_id", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamChange.prototype, "new_pwr_tax_mult", void 0);
TeamChange = __decorate([
    Struct.type("teamchange")
], TeamChange);
export { TeamChange };
let TeamCreate = class TeamCreate extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], TeamCreate.prototype, "owner", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamCreate.prototype, "min_pwr_tax_mult", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamCreate.prototype, "owner_cut_mult", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], TeamCreate.prototype, "url_safe_name", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], TeamCreate.prototype, "info_json_ipfs", void 0);
TeamCreate = __decorate([
    Struct.type("teamcreate")
], TeamCreate);
export { TeamCreate };
let TeamEdit = class TeamEdit extends Struct {
};
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamEdit.prototype, "team_id", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], TeamEdit.prototype, "owner", void 0);
__decorate([
    Struct.field(Name, { array: true }),
    __metadata("design:type", Array)
], TeamEdit.prototype, "managers", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamEdit.prototype, "min_pwr_tax_mult", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamEdit.prototype, "owner_cut_mult", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], TeamEdit.prototype, "url_safe_name", void 0);
__decorate([
    Struct.field("string"),
    __metadata("design:type", String)
], TeamEdit.prototype, "info_json_ipfs", void 0);
TeamEdit = __decorate([
    Struct.type("teamedit")
], TeamEdit);
export { TeamEdit };
let TeamTaxrate = class TeamTaxrate extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], TeamTaxrate.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt8),
    __metadata("design:type", UInt8)
], TeamTaxrate.prototype, "new_pwr_tax_mult", void 0);
TeamTaxrate = __decorate([
    Struct.type("teamtaxrate")
], TeamTaxrate);
export { TeamTaxrate };
let Thisround = class Thisround extends Struct {
};
Thisround = __decorate([
    Struct.type("thisround")
], Thisround);
export { Thisround };
let UnstakeEnd = class UnstakeEnd extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], UnstakeEnd.prototype, "boid_id", void 0);
UnstakeEnd = __decorate([
    Struct.type("unstakeend")
], UnstakeEnd);
export { UnstakeEnd };
let UnstakeInit = class UnstakeInit extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], UnstakeInit.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], UnstakeInit.prototype, "quantity", void 0);
UnstakeInit = __decorate([
    Struct.type("unstakeinit")
], UnstakeInit);
export { UnstakeInit };
let UnstakeStop = class UnstakeStop extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], UnstakeStop.prototype, "boid_id", void 0);
UnstakeStop = __decorate([
    Struct.type("unstakestop")
], UnstakeStop);
export { UnstakeStop };
let UnstkeDeleg = class UnstkeDeleg extends Struct {
};
__decorate([
    Struct.field(UInt64),
    __metadata("design:type", UInt64)
], UnstkeDeleg.prototype, "stake_id", void 0);
UnstkeDeleg = __decorate([
    Struct.type("unstkedeleg")
], UnstkeDeleg);
export { UnstkeDeleg };
let Withdraw = class Withdraw extends Struct {
};
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Withdraw.prototype, "boid_id", void 0);
__decorate([
    Struct.field(UInt32),
    __metadata("design:type", UInt32)
], Withdraw.prototype, "quantity", void 0);
__decorate([
    Struct.field(Name),
    __metadata("design:type", Name)
], Withdraw.prototype, "to", void 0);
Withdraw = __decorate([
    Struct.type("withdraw")
], Withdraw);
export { Withdraw };
//# sourceMappingURL=boid.system.js.map